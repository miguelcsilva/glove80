/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define L_DEF 0
#define L_CUR 1
#define L_NUM 2
#define L_SYM 3

//
// Glove80 key positions index for home row mods
//
// |------------------------|------------------------|
// | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
// |                        |                        |
// |  0  1  2  3  4         |          5  6  7  8  9 |
// | 10 11 12 13 14 15      |      16 17 18 19 20 21 |
// | 22 23 24 25 26 27      |      28 29 30 31 32 33 |
// | 34 35 36 37 38 39      |      40 41 42 43 44 45 |
// | 46 47 48 49 50 51      |      58 59 60 61 62 63 |
// | 64 65 66 67 68         |         75 76 77 78 79 |
// |                69 52   |   57 74                |
// |                 70 53  |  56 73                 |
// |                  71 54 | 55 72                  |
// |------------------------|------------------------|
//
#define LEFT_HAND_KEYS      \
      0  1  2  3  4         \
     10 11 12 13 14 15      \
     22 23 24 25 26 27      \
     34 35 36 37 38 39      \
     46 47 48 49 50 51      \
     64 65 66 67 68
#define RIGHT_HAND_KEYS     \
                                       5  6  7  8  9 \
                                   16 17 18 19 20 21 \
                                   28 29 30 31 32 33 \
                                   40 41 42 43 44 45 \
                                   58 59 60 61 62 63 \
                                      75 76 77 78 79
#define THUMB_KEYS          \
                    69 52       57 74                \
                     70 53     56 73                 \
                      71 54   55 72

/ {
    behaviors {
        lm: layer_mod {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        lparang: left_parenthesis_and_less_than {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rparang: right_parenthesis_and_greater_than {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp F1  &kp F2       &kp F3       &kp F4       &kp F5                                                                                                           &kp F6       &kp F7       &kp F8       &kp F9       &kp F10
            &none   &kp N1       &kp N2       &kp N3       &kp N4       &kp N5                                                                                     &kp N6   &kp N7       &kp N8       &kp N9       &kp N0       &none
            &none   &none        &kp Y        &kp O        &kp U        &kp COMMA                                                                                  &kp DOT  &kp D        &kp N        &kp L        &none        &none
            &none   &hml LALT K  &hml LGUI I  &hml LCTL E  &hml LSFT A  &kp B                                                                                      &kp W    &hmr LSFT H  &hmr LCTL T  &hmr LGUI S  &hmr LALT M  &none
            &none   &kp J        &kp G        &kp P        &kp C        &kp X      &kp ESC         &none          &none      &none     &none      &kp RET          &kp Q    &kp R        &kp V        &kp F        &kp Z        &none
            &none   &kp HOME     &kp PG_DN    &kp PG_UP    &kp END                 &lm L_CUR BSPC  &lm L_NUM DEL  &kp CAPS   &none     &kp TAB    &lm L_SYM SPACE           &lparang     &kp LBKT     &kp RBKT     &rparang     &none
            >;
        };
        cursor_layer {
            bindings = <
            &none  &none  &none  &none  &none                                                                       &bt_0      &bt_1      &bt_2          &bt_3    &bt BT_CLR
            &none  &none  &none  &none  &none  &none                                                         &none  &none      &none      &none          &none    &none
            &none  &none  &none  &none  &none  &none                                                         &none  &kp LG(Z)  &kp UP     &kp LG(LS(Z))  &none    &none
            &none  &none  &none  &none  &none  &none                                                         &none  &kp LEFT   &kp DOWN   &kp RIGHT      &none    &none
            &none  &none  &none  &none  &none  &none  &none  &none  &none   &none  &none          &none      &none  &kp LG(V)  &kp LG(C)  &kp LG(X)      &none    &none
            &none  &none  &none  &none  &none         &none  &none  &none   &none  &kp LG(LS(F))  &kp LG(F)         &none      &none      &none          &none    &none
            >;
        };
        number_layer {
            bindings = <
            &none  &none  &none  &none  &none                                                                                     &none      &none      &none      &none          &none
            &none  &none  &none  &none  &none  &none                                                             &none            &kp CARET  &kp TILDE  &kp UNDER  &kp EXCL       &none
            &none  &none  &none  &none  &none  &none                                                             &kp PRCNT        &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp COLON      &none
            &none  &none  &none  &none  &none  &none                                                             &kp KP_PLUS      &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS   &none
            &none  &none  &none  &none  &none  &none  &none  &none  &none   &kp LT     &kp GT      &kp KP_EQUAL  &kp KP_MULTIPLY  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DIVIDE  &none
            &none  &none  &none  &none  &none         &none  &none  &none   &kp COMMA  &kp KP_DOT  &kp KP_N0                      &lparang   &kp LBKT   &kp RBKT   &rparang       &none
            >;
        };
        symbols_layer {
            bindings = <
            &none      &none      &none      &none      &none                                                                               &none  &none  &none  &none  &none
            &none      &none      &none      &none      &none      &none                                                             &none  &none  &none  &none  &none  &none
            &none      &kp EXCL   &kp QMARK  &kp DQT    &kp APOS   &kp SEMI                                                          &none  &none  &none  &none  &none  &none
            &none      &kp PIPE   &kp MINUS  &kp UNDER  &kp EQUAL  &kp DOT                                                           &none  &none  &none  &none  &none  &none
            &none      &kp HASH   &kp CARET  &kp DLLR   &kp STAR   &kp COMMA  &kp AT     &kp AMPS   &kp PRCNT   &none  &none  &none  &none  &none  &none  &none  &none  &none
            &none      &none      &none      &kp GRAVE  &kp TILDE             &kp COLON  &kp FSLH   &kp BSLH    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
